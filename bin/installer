<?php

define("PLATFORM", platform());
define("DS", DIRECTORY_SEPARATOR);
define("DOWNLOAD_URL", "https://github.com/phpfog/pf/zipball/master");
define("INSTALL_DIR", str_replace("/", DS, "/usr/local/phpfog/pf/"));
define("BIN_DIR", str_replace("/", DS, "/usr/bin/"));

array_shift($argv);

process($argv);

function process($argv) {

    # Run through all arguments
    foreach ($argv as $arg) {
        switch ($arg) {
            case '-h':
            case '--help':
                display_help();
                exit(0);
                break;
            case '-c':
            case '--check':
                exit(check_deps());
                break;
            case '-f':
            case '--force':
                install();
                break;
            default:
                break;
        }
    }

    if (check_deps()) {
        install();
    }

    exit(0);
}

function check_deps() {
    $errors = array();

    if (PLATFORM <> OSX) {
        $errors[] = "The current os (".php_uname('s').") is not supported";
    }

    if (version_compare(PHP_VERSION, '5.3.2', '<')) {
        $errors[] = "Minimum required php version not met.";
    }

    if (!empty($errors)) {

        echo 'PF cannot be installed for the following reasons:'.PHP_EOL;
        foreach ($errors as $error) {
            error("    $error".PHP_EOL);
        }
        echo PHP_EOL;
        return 0;
    }

    success("All settings correct for using PF".PHP_EOL);
    return 1;
}

function install() {
    $source_package = tempnam("","");

    info('Preparing installation directory...'.PHP_EOL);
    rrmdir(INSTALL_DIR);
    if (!is_dir(INSTALL_DIR) && !mkdir(INSTALL_DIR, 0777, true)) {
        error('Failed to create installation folder.'.PHP_EOL);
        exit(1);
    }

    info('Downloading source package...'.PHP_EOL);
    if (!copy(DOWNLOAD_URL, $source_package)) {
        error('Failed to download installation package.'.PHP_EOL);
        exit(1);
    }

    info('Unpacking...'.PHP_EOL);
    $zip = new ZipArchive;
    $res = $zip->open($source_package);
    if ($res === TRUE) {
        $zip->extractTo(INSTALL_DIR);
        $zip->close();
    } else {
        error('Failed unpack download.'.PHP_EOL);
        exit(1);
    }
    unlink($source_package); # remove tempfile

    # Remove the package files out of the package folder
    $package_contents = glob(INSTALL_DIR.'*');
    $ignore = array('.', '..');
    if (1 === count($package_contents)) {
        $inner_folder = $package_contents[0];
        foreach (array_merge(glob($inner_folder.DS.'.*'), glob($inner_folder.DS.'*')) as $filename) {
            $basename = basename($filename);
            if (!in_array($basename, $ignore)) {
                rename($filename, INSTALL_DIR.$basename);
            }
        }
        rmdir($inner_folder);
    }

    @unlink(BIN_DIR."pf");

    if (!@chmod(INSTALL_DIR."bin".DS."pf", 0755)) {
        error('Failed to set permissions.'.PHP_EOL);
        exit(1);
    }

    if (!@symlink(INSTALL_DIR."bin".DS."pf", BIN_DIR."pf")) {
        error('Failed install pf bin file.'.PHP_EOL);
        exit(1);
    }

    success('Installation Successfull.'.PHP_EOL);
}

function rrmdir($dir) {
    if (is_dir($dir)) {
        $ignore = array('.', '..');
        $objects = scandir($dir);
        foreach ($objects as $object) {
            if (!in_array($object, $ignore)) {
                if (filetype($dir.DS.$object) == "dir") rrmdir($dir.DS.$object); else unlink($dir.DS.$object);
            }
        }
        reset($objects);
        rmdir($dir);
    }
 }

function success($message) { echo colorize($message, 32); }
function info($message) { echo colorize($message, 36); }
function error($message) { echo colorize($message, 31); }

function colorize($str, $color) {
    return sprintf("\033[0;".$color."m%s\033[0m", $str);
}

function platform() {
    define("OSX", 'osx');
    define("WINDOWS", 'windows');
    define("OTHER", 'other');
    switch (strtoupper(php_uname('s'))) {
        case 'DARWIN':
            return OSX;
        break;
        default:
            return OTHER;
        break;
    }
    return 'windows';
}

function display_help() {
    echo <<<EOF
PF Installer
------------
Options
-h, --help   Display this text
-c, --check  Display the environment info
-f, --force  Forces the installation

EOF;
}
