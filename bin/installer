<?php
define("PLATFORM", platform());
define("DS", DIRECTORY_SEPARATOR);
define("DOWNLOAD_URL", "https://github.com/phpfog/pf/zipball/master");
define("DOWNLOAD_EDGE_URL", "https://github.com/phpfog/pf/zipball/edge");
define("PKG_DIR", get_package_dir());
define("INSTALL_DIR", str_replace("/", DS, PKG_DIR."/pf"));
define("BIN_DIR", str_replace("/", DS, "/usr/local/bin"));

global $edge; $edge  = false;

array_shift($argv);
$err;

function get_package_dir() {
    switch (PLATFORM) {
        case OSX:
        case LINUX:
            return str_replace('/', DS, "/usr/local/phpfog");
            break;
        case WINDOWS:
            return str_replace('\\', DS, $_SERVER['USERPROFILE']."\\PHPFog");
            break;
    }
}

# Run through all arguments
foreach ($argv as $arg) {
    switch ($arg) {
        case '--help':
            display_help();
            exit(0);
            break;
        case '--check':
            exit(check_deps());
            break;
        case '--force':
            install();
            break;
        case '--update':
            update();
            exit(0);
            break;
        case '--uninstall':
            uninstall();
            exit(0);
            break;
        case '--edge':
            $edge = true;
            break;
        default:
            break;
    }
}
if (check_deps()) {
    install();
}

function wrap($msg) {
    return $msg.PHP_EOL;
}

function clean($r = '', $error) {
    return preg_replace('/.*:/', $r, $error).'.';
}

# Pre-installation dependency checks
function check_deps() {
    $errors = array();
    $supported = array(OSX, LINUX, WINDOWS);

    if (!in_array(PLATFORM, $supported)) {
        $errors[] = "The current os (".PHP_OS.") is not supported";
    }

    if (version_compare(PHP_VERSION, '5.3.1', '<')) {
        $errors[] = "Minimum required php version not met.";
    }

    if (extension_loaded('curl') === false) {
        $errors[] = "The curl extension for php is not loaded.";
    }

    if (!has_bin('git')) {
        $errors[] = "Cannot find git executable.";
    }

    # Linux only checks
    if (PLATFORM!=WINDOWS) {
        if (!is_dir(BIN_DIR)) {
            $errors[] = "The bin folder (".BIN_DIR.") folder does not exists.";
        }
    }

    if (!empty($errors)) {
        echo wrap('PF cannot be installed for the following reason(s):');
        foreach ($errors as $error) {
            error("    ".$error);
        }
        echo PHP_EOL;
        return 0;
    }

    success("All settings correct for using PF");
    return 1;
}

# Install needed files
function install() {
    global $edge;
    $source_package = tempnam('/tmp', '');
    unlink($source_package);

    info('Preparing installation directory ('.INSTALL_DIR.')...');
    rrmdir(PKG_DIR);
    if (!is_dir(INSTALL_DIR) && !@mkdir(INSTALL_DIR, 0777, true)) {
        $err = error_get_last();
        error('Failed to create installation folder ('.clean(INSTALL_DIR.'.', $err['message']) .')');
        exit(1);
    }

    info('Downloading source package...');
    $download_url = ($edge==false) ? DOWNLOAD_URL : DOWNLOAD_EDGE_URL;
    if (!@download($download_url, $source_package)) {
        $err = error_get_last();
        error('Failed to download installation package. '.$err['message']);
        exit(1);
    }

    info('Unpacking...');
    $zip = new ZipArchive;
    $res = $zip->open($source_package);
    if ($res === TRUE) {
        if (!@$zip->extractTo(INSTALL_DIR)) {
            $err = error_get_last();
            error('Failed to extract download to '.clean(INSTALL_DIR.'.', $err['message']));
            exit(1);
        }
        $zip->close();
    } else {
        $err = error_get_last();
        error('Failed to open archive.'.clean($err['message']));
        exit(1);
    }

    # Remove tempfile
    @unlink($source_package);

    # Remove the package files out of the package folder
    $package_contents = glob(INSTALL_DIR.DS.'*');
    if (1 === count($package_contents)) {
        $inner_folder = $package_contents[0];
        foreach (array_merge(glob($inner_folder.DS.'.*'), glob($inner_folder.DS.'*')) as $filename) {
            $basename = basename($filename);
            if ($basename != '.' && $basename != '..') {
                rename($filename, INSTALL_DIR.DS.$basename);
            }
        }
        if (!@rmdir($inner_folder)) {
            $err = error_get_last();
            error("Failed to remove ".clean($inner_folder.'.', $err['message']));
            exit(1);
        }
    }

    @unlink(BIN_DIR.DS."pf");

    if (!@chmod(INSTALL_DIR.DS."bin".DS."pf", 0755)) {
        $err = error_get_last();
        error("Couldn't chmod ".clean(INSTALL_DIR.DS."bin".DS."pf.", $err['message']));
        exit(1);
    }

    if (PLATFORM != WINDOWS) {
        if (!@symlink(INSTALL_DIR.DS."bin".DS."pf", BIN_DIR.DS."pf")) {
            $err = error_get_last();
            error("Failed to make a symlink of ".clean(INSTALL_DIR.DS."bin".DS."pf.", $err['message']));
            exit(1);
        }
    }

    post_install();
}

# Post installation sanity checks
function post_install() {
    $errors = array();

    if (!has_bin('pf')) {
        $errors[] = "Could not find pf in the path. Please add the following to your path: ".((PLATFORM != WINDOWS) ? "/usr/local/bin" : "%USERPROFILE\PHPFog\pf\bin");
    }

    if (!empty($errors)) {
        echo wrap('Installation is complete however the following issue(s) may prevent pf from working:');
        foreach ($errors as $error) {
            error("    ".$error);
        }
        echo PHP_EOL;
        return 0;
    } else {
        success('Installation Successful.');
    }
}

function download($url, $path) {
    exec(sprintf("curl -sL -o \"%s\" %s", $path, $url), $output, $exit_code);

    return true;
}

# Remove associated files
function uninstall() {
    echo wrap("Removing pf executable file...");
    if (@unlink(BIN_DIR.DS."pf")) {
        echo wrap("Removing all pf support files...");
        rrmdir(PKG_DIR);
    } else {
        $err = error_get_last();
        error("Failed to remove ".clean(BIN_DIR.DS."pf.", $err['message']));
        exit(1);
    }
}

# Update the user's pf installation
function update() {
    uninstall();
    install();
}

function rrmdir($dir) {
    if (is_dir($dir)) {
        $objects = scandir($dir);
        foreach ($objects as $obj) {
            if ($obj != '.' && $obj != '..') {
                $path = $dir.DS.$obj;
                if (filetype($path) == "dir") {
                    rrmdir($path);
                } else {
                    if (!@unlink($path)) {
                        $err = error_get_last();
                        error("Failed to remove ".clean($path.'.', $err['message']));
                        exit(1);
                    }
                }
            }
        }
        reset($objects);
        if (!@rmdir($dir)) {
            $err = error_get_last();
            error("Failed to remove ".clean($dir.'.', $err['message']));
            exit(1);
        }
    }
}

function success($message) {
    echo wrap(colorize($message, 32));
}
function info($message) {
    echo wrap(colorize($message, 36));
}
function error($message) {
    echo wrap(colorize($message, 31));
}

function colorize($str, $color) {
    return (PLATFORM != WINDOWS) ? sprintf("\033[0;".$color."m%s\033[0m", $str) : $str;
}

function platform() {
    define("OSX", 'osx');
    define('LINUX', 'linux');
    define("WINDOWS", 'windows');
    define("OTHER", 'other');

    $os = strtoupper(PHP_OS);
    switch ($os) {
        case 'DARWIN':
            return OSX;
        case 'LINUX':
            return LINUX;
        default:
            return substr($os, 0, 3) === 'WIN' ? WINDOWS : OTHER;
    }
}

function has_bin($name) {
    $output = null;
    $exit_code = null;
    if (PLATFORM != WINDOWS) {
        exec("which ".$name, $output, $exit_code);
    } else {
        exec("where /Q ".$name, $output, $exit_code);
    }
    unset($output);
    return $exit_code == 0;
}

function display_help() {
    echo <<<EOF
PF Installer
------------
Options
--help       Display this text
--check      Display the environment info
--force      Forces the installation
--uninstall  Uninstall all associated files
--update     Update the current install
--edge       Installs the edge version

EOF;
}
