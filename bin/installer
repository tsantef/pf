<?php
define("PLATFORM", platform());
define("HOME", $_SERVER['HOME']);

# Define config path for less declarations
define("CONFIG", HOME."/.pfconfig");

# Cut down on the number of checks
define("NOT_WIN", (PLATFORM != WINDOWS) ? 1 : 0);

array_shift($argv);
$verbose = 0;

# Run through all arguments
while($arg = array_shift($argv)) {
    switch($arg) {
        case '-h':
        case '--help':
            display_help();
            exit(0);
        case '-c':
        case '--check':
            $check = 1;
            break;
        case '-i':
        case '--install-dir':
            $install_dir = rtrim(pos($argv), '/');
            unset($argv[key($argv)]);
            break;
        case '-e':
        case '--exec-dir':
            $exec_dir = rtrim(pos($argv), '/');
            unset($argv[key($argv)]);
            break;
        case '-u':
        case '--uninstall':
            $uninstall = 1;
            break;
        case '-v':
        case '--verbose':
            $verbose = 1;
            break;
        default:
            die(error("Error: Invalid flag '".$arg."'."));
    }
}

if (file_exists(HOME."/.pfconfig")) {
    $config = json_decode(file_get_contents(HOME."/.pfconfig"), true);
    $install_dir = $config['install_dir'];
    $exec_dir = $config['bin_dir'];
}

if (!isset($install_dir)) {
    $dir = rtrim(trim(prompt("Support files install directory [".get_package_dir()."]: ")), '/');
    $install_dir = !empty($dir) ? $dir : get_package_dir();
}
if (!isset($exec_dir)) {
    $dir = rtrim(trim(prompt("Path to install PF executable [/usr/local/bin]: ")), '/');
    $exec_dir = !empty($dir) ? $dir : "/usr/local/bin";
}

# Define installation directory and location of pf executable
define("INSTALL_DIR", fix_path($install_dir));
define("BIN_DIR", fix_path($exec_dir));

# Define location of pf executable
define("EXE", BIN_DIR."/pf");

# Define location of pf package (support files)
define("PKG_DIR", INSTALL_DIR."/pf");

if (isset($uninstall)) {
    uninstall();
    exit(0);
} else if (isset($check)) {
    exit(check_deps());
} else if (isset($force)) {
    install();
} else if (check_deps()) {
    install();
}

# Prompt for input
function prompt($msg, $pw = false) {
    echo $msg;
    if (NOT_WIN && $pw) {
        system("stty -echo");
        $input = trim(fgets(fopen("php://stdin", "r")));
        system("stty echo");
        echo PHP_EOL;
    } else {
        $input = trim(fgets(fopen("php://stdin", "r")));
    }

    return $input;
}

# Fix paths, really only needed for Windows
function fix_path($p) {
    return str_replace('\\', DIRECTORY_SEPARATOR, $p);
}

# Default install location
function get_package_dir() {
    switch (PLATFORM) {
        case OSX:
        case LINUX:
            return "/usr/local/phpfog";
        case WINDOWS:
            return fix_path($_SERVER['USERPROFILE']."\\PHPFog");
    }
}

function wrap($msg) {
    return $msg.PHP_EOL;
}
function ewrap($msg) {
    echo $msg.PHP_EOL;
}

function clean($r = '', $e) {
    return preg_replace('/.*:/', $r, $e).'.';
}

# Pre-installation dependency checks
function check_deps() {
    $supported = array(OSX, LINUX, WINDOWS);
    $errors = array();

    if (!in_array(PLATFORM, $supported)) {
        $errors[] = "The current OS (".PHP_OS.") is not officially supported";
    }

    if (version_compare(PHP_VERSION, '5.3.1', '<')) {
        $errors[] = "Minimum required PHP version not met.";
    }

    if (!extension_loaded('curl')) {
        $errors[] = "The curl extension for PHP is not loaded.";
    }

    if (!has_bin('git')) {
        $errors[] = "Cannot find git executable.";
    }

    # Linux only checks
    if (NOT_WIN && !is_dir(BIN_DIR)) {
        $errors[] = "The bin folder (".BIN_DIR.") folder does not exist.";
    }

    if (!empty($errors)) {
        notice('PF cannot be installed for the following reason(s):');
        foreach ($errors as $e) {
            error("    ".$e);
        }

        return 0;
    }
    success("All settings correct for using PF.");

    return 1;
}

# Install needed files
function install() {
    # Verbose check
    $verbose = $GLOBALS['verbose'];

    # Make the install location if it doesn't exist yet
    if (!is_dir(INSTALL_DIR)) {
        info(INSTALL_DIR." doesn't exist, creating it now...");

        if (!@mkdir(INSTALL_DIR)) {
            die(error("You do not have the permissions to create ".INSTALL_DIR));
        }
    }
    chdir(INSTALL_DIR);
    info("Cloning pf repo to ".PKG_DIR);

    # Clone quietly
    system("git clone -q git@github.com:phpfog/pf");

    # Symlink the executable from the project's bin to the bin dir (exec dir)
    if ($verbose) {
        info("Creating symbolic link from '".PKG_DIR."/bin/pf' to '".EXE."'");
    }
    @symlink(fix_path(PKG_DIR."/bin/pf"), EXE);

    if ($verbose) {
        info("Writing paths to ".CONFIG);
    }
    file_put_contents(CONFIG, json_encode(array("install_dir" => INSTALL_DIR, "bin_dir" => BIN_DIR)));

    post_install();
}

# Post installation sanity checks
function post_install() {
    $errors = array();

    if (!has_bin('pf')) {
        $errors[] = 'Could not find pf in $PATH. Please add the following to your $PATH: '.fix_path(BIN_DIR);
    }

    if (!empty($errors)) {
        info('Installation is complete however the following issue(s) may prevent pf from working:');
        foreach ($errors as $error) {
            error("    ".$error);
        }

        return 0;
    } else {
        success('Installation Successful.');
    }
}

# Remove associated files
function uninstall() {
    # Verbose
    $verbose = $GLOBALS['verbose'];
    $pkg_dir = INSTALL_DIR."/pf";
    $exe = BIN_DIR."/pf";

    # Check for executable
    if (file_exists($exe)) {
        info("Removing PF executable file".($verbose ? ": ".$exe : "..."));
        # Remove executable
        if (!@unlink($exe)) {
            $err = error_get_last();
            error("Failed to remove ".clean($exe.'.', $err['message']));
        }
    } else {
        notice("PF executable ".($verbose ? "(".$exe.") " : '')."does not exist.");
    }
    # Check for support files
    if (file_exists($pkg_dir)) {
        info("Removing all PF support files".($verbose ? ": ".$pkg_dir : "..."));
        rrmdir($pkg_dir);
    } else {
        notice("Support files ".($verbose ? "(".$pkg_dir.") " : '')."do not exist.");
    }
    # Check for config
    if (file_exists(CONFIG)) {
        info("Removing PF config file".($verbose ? ": ".CONFIG : "..."));
        unlink(CONFIG);
    } else {
        notice("Config file ".($verbose ? "(".CONFIG.") " : "...")."does not exist.");
    }
}

function rrmdir($dir) {
    if (is_dir($dir)) {
        foreach ($objects = scandir($dir) as $obj) {
            if ($obj != '.' && $obj != '..') {
                $path = $dir.'/'.$obj;
                if (is_dir($path)) {
                    rrmdir($path);
                } else {
                    if (!@unlink($path)) {
                        $err = error_get_last();
                        error("Failed to remove ".clean($path.'.', $err['message']));
                        exit(1);
                    }
                }
            }
        }
        reset($objects);
        if (!@rmdir($dir)) {
            $err = error_get_last();
            error("Failed to remove ".clean($dir.'.', $err['message']));
            exit(1);
        }
    }
}

function success($message) {
    ewrap(colorize($message, 32));
}
function info($message) {
    ewrap(colorize($message, 36));
}
function notice($message) {
    ewrap(colorize($message, 33));
}
function error($message) {
    ewrap(colorize($message, 31));
}

function colorize($str, $color) {
    return NOT_WIN ? sprintf("\033[0;".$color."m%s\033[0m", $str) : $str;
}

function platform() {
    define("OSX", 'osx');
    define("LINUX", 'linux');
    define("WINDOWS", 'windows');
    define("OTHER", 'other');

    switch ($os = strtoupper(PHP_OS)) {
        case 'DARWIN':
            return OSX;
        case 'LINUX':
            return LINUX;
        default:
            return substr($os, 0, 3) === 'WIN' ? WINDOWS : OTHER;
    }
}

function has_bin($name) {
    if (NOT_WIN) {
        exec("which ".$name, $output, $exit_code);
    } else {
        exec("where /Q ".$name, $output, $exit_code);
    }

    return (0 === $exit_code) ? 1 : 0;
}

function display_help() {
    echo <<<EOF
PF Installer
------------
Options
--help, -h              Display this text.

--check, -c             Check if system meets requirements.

--exec-dir, -e          Directory where pf executable is linked to (should be on \$PATH).

--install-dir, -i       Directory where pf files are stored.

--uninstall, -u         Uninstall all associated files.

--verbose, -v           Make the install/uninstall process verbose.

EOF;
}
